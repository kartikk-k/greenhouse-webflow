{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/copyToClipboard.ts", "../src/utils/greenhouse.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\r\n", "export const copyToClipboard = () => {\r\n  const ATTRIBUTE_NAME = 'tc-copy-element';\r\n\r\n  window.addEventListener('load', () => {\r\n    main();\r\n  });\r\n\r\n  function main() {\r\n    const allTextElements = document.querySelectorAll(\r\n      `[${ATTRIBUTE_NAME}]`\r\n    ) as NodeListOf<HTMLElement>;\r\n\r\n    allTextElements.forEach((item) => {\r\n      item.onclick = async () => {\r\n        if (item.getAttribute(ATTRIBUTE_NAME) !== 'false') {\r\n          const text = item?.textContent;\r\n          if (text) await window.navigator.clipboard.writeText(text);\r\n          alert('Text copied');\r\n        }\r\n      };\r\n    });\r\n  }\r\n};\r\n", "type job = {\r\n  department: string;\r\n  position: string;\r\n  location: string;\r\n}\r\n\r\nexport const greenhouse = () => {\r\n  const REQUIRED_FIELDS = ['department', 'position', 'location']\r\n\r\n  // main greenhouse component - every other component should be inside this\r\n  const mainElement = document.querySelectorAll('[tc-greenhouse-main=\"active\"]')[0];\r\n  // element that will be used to single job result\r\n  const listElement = document.querySelectorAll('[tc-greenhouse-element=\"list-item\"]')[0];\r\n\r\n  // results/ list of elements to render\r\n  let list: Element[] = []\r\n\r\n  // temp data\r\n  const data: job[] = [{\r\n    department: 'Core Accounting',\r\n    position: 'Accounts',\r\n    location: 'New York, USA',\r\n  }, {\r\n    department: 'Information Technology',\r\n    position: 'Software Engineer',\r\n    location: 'San Francisco, USA'\r\n  }, {\r\n    department: 'Designing',\r\n    position: '3D Designer',\r\n    location: 'San Francisco, USA'\r\n  }];\r\n\r\n  renderList(data)\r\n\r\n  function renderList(data: job[]) {\r\n    if (!mainElement) return\r\n\r\n    data.forEach(item => {\r\n      let newElement = listElement.cloneNode(true) as Element\r\n      // @ts-ignore\r\n      newElement.style.display = 'block'\r\n      REQUIRED_FIELDS.forEach(field => {\r\n        // find all elements of the current field\r\n        newElement.querySelectorAll(`[tc-greenhouse-element=\"${field}\"]`).forEach(element => {\r\n          // replacing with actual data\r\n          element.textContent = item[field as keyof job]\r\n        })\r\n      })\r\n      console.log(\"adding\")\r\n      list.push(newElement)\r\n    })\r\n\r\n    listElement.remove()\r\n    list.map(element => mainElement.appendChild(element))\r\n  }\r\n\r\n};\r\n\r\n/* outline of the greenhouse component:\r\n    -> main\r\n        tc-main - manual\r\n        tc-pagination - manual (optional)\r\n        tc-results-per-page - manual (optional)\r\n\r\n    -> filter\r\n        filters[] - manual\r\n            tc-filters-list - manual\r\n             |- tc-filter-item - auto\r\n             |- tc-filter-item - auto\r\n\r\n    -> results (positions)\r\n        tc-results-list - manual\r\n            |- tc-position-item - auto\r\n            |- tc-position-item - auto\r\n    \r\n    -> error component\r\n        tc-error - manual\r\n*/\r\n", "import { copyToClipboard } from '@utils/copyToClipboard';\r\nimport { greenhouse } from '@utils/greenhouse';\r\n\r\nwindow.Webflow ||= [];\r\nwindow.Webflow.push(() => {\r\n  greenhouse();\r\n  copyToClipboard();\r\n});\r\n\r\n// for testing purposes\r\n\r\n// window.onload = () => {\r\n//   greenhouse()\r\n// }"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACAtF,MAAM,kBAAkB,MAAM;AACnC,UAAM,iBAAiB;AAEvB,WAAO,iBAAiB,QAAQ,MAAM;AACpC,WAAK;AAAA,IACP,CAAC;AAED,aAAS,OAAO;AACd,YAAM,kBAAkB,SAAS;AAAA,QAC/B,IAAI,cAAc;AAAA,MACpB;AAEA,sBAAgB,QAAQ,CAAC,SAAS;AAChC,aAAK,UAAU,YAAY;AACzB,cAAI,KAAK,aAAa,cAAc,MAAM,SAAS;AACjD,kBAAM,OAAO,MAAM;AACnB,gBAAI;AAAM,oBAAM,OAAO,UAAU,UAAU,UAAU,IAAI;AACzD,kBAAM,aAAa;AAAA,UACrB;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;;;AChBO,MAAM,aAAa,MAAM;AAC9B,UAAM,kBAAkB,CAAC,cAAc,YAAY,UAAU;AAG7D,UAAM,cAAc,SAAS,iBAAiB,+BAA+B,EAAE,CAAC;AAEhF,UAAM,cAAc,SAAS,iBAAiB,qCAAqC,EAAE,CAAC;AAGtF,QAAI,OAAkB,CAAC;AAGvB,UAAM,OAAc,CAAC;AAAA,MACnB,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,GAAG;AAAA,MACD,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,GAAG;AAAA,MACD,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,CAAC;AAED,eAAW,IAAI;AAEf,aAAS,WAAWA,OAAa;AAC/B,UAAI,CAAC;AAAa;AAElB,MAAAA,MAAK,QAAQ,UAAQ;AACnB,YAAI,aAAa,YAAY,UAAU,IAAI;AAE3C,mBAAW,MAAM,UAAU;AAC3B,wBAAgB,QAAQ,WAAS;AAE/B,qBAAW,iBAAiB,2BAA2B,KAAK,IAAI,EAAE,QAAQ,aAAW;AAEnF,oBAAQ,cAAc,KAAK,KAAkB;AAAA,UAC/C,CAAC;AAAA,QACH,CAAC;AACD,gBAAQ,IAAI,QAAQ;AACpB,aAAK,KAAK,UAAU;AAAA,MACtB,CAAC;AAED,kBAAY,OAAO;AACnB,WAAK,IAAI,aAAW,YAAY,YAAY,OAAO,CAAC;AAAA,IACtD;AAAA,EAEF;;;ACrDA,SAAO,YAAY,CAAC;AACpB,SAAO,QAAQ,KAAK,MAAM;AACxB,eAAW;AACX,oBAAgB;AAAA,EAClB,CAAC;",
  "names": ["data"]
}
