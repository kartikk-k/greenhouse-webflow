{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/greenhouse.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\r\n", "export const greenhouse = async () => {\r\n\r\n  let current_page = 1;\r\n\r\n  let apiData: undefined | null | job[] = [] // all data from api response\r\n  let dataStore: job[] = [] // used for search\r\n  let filteredData: job[] = [] // all data with filters/search applied\r\n  let paginatedData: job[] = [] // paginated data\r\n\r\n  let filters: filter[] = [{\r\n    name: 'department',\r\n    options: ['All Departments']\r\n  }, {\r\n    name: 'location',\r\n    options: ['All Locations']\r\n  }]\r\n\r\n  const ALLOWED_FIELDS = ['department', 'title', 'location', 'content', 'link']\r\n\r\n  // components required\r\n  const mainElement = document.querySelector('[tc-greenhouse-element=\"main\"]') as HTMLDivElement;\r\n  const list = mainElement?.querySelector('[tc-greenhouse-element=\"list\"]') as HTMLDivElement;\r\n  const listElement = list?.querySelector('[tc-greenhouse-element=\"list-item\"]') as HTMLDivElement;\r\n\r\n  if (!mainElement || !list || !listElement) return // essentials/required\r\n\r\n  const errorComponent = mainElement?.querySelector('[tc-greenhouse-element=\"error\"]') as HTMLElement\r\n  errorComponent?.remove()\r\n  const emptyComponent = mainElement?.querySelector('[tc-greenhouse-element=\"empty-state\"]') as HTMLElement\r\n  emptyComponent?.remove()\r\n\r\n  const searchElement = mainElement?.querySelectorAll('[tc-greenhouse-element=\"search\"]')[0] as HTMLInputElement;\r\n  // @ts-ignore\r\n  searchElement && searchElement.addEventListener('input', e => handleInputChange(e.target.value))\r\n\r\n  // settings\r\n  let paginate: boolean = mainElement.getAttribute('tc-greenhouse-paginate') === 'true' ? true : false // default - false\r\n  paginate ? addPagination() : addVerticalLoader()\r\n\r\n  let resultsPerPage = Number(mainElement.getAttribute('tc-greenhouse-results-per-page')) || 5 // default - 5\r\n\r\n  // --------------------- main api call ---------------------\r\n  const loader = mainElement.querySelector('[tc-greenhouse-element=\"loader\"]') as HTMLElement\r\n  const mainParent = mainElement.parentElement as HTMLElement\r\n\r\n  const mainDisplayStyle = mainElement.style.display\r\n  mainElement.style.display = 'none'\r\n  if (loader) mainParent.appendChild(loader)\r\n\r\n  let componentData = await getDataFromGreenhouseAPI()\r\n  if (loader) mainParent.removeChild(loader)\r\n  if (componentData instanceof Error) return renderErrorComponent(componentData.message)\r\n  mainElement.style.display = mainDisplayStyle\r\n\r\n  setFilters()\r\n\r\n  function renderErrorComponent(err: string) {\r\n    mainElement.innerHTML = ''\r\n    if (err === 'No jobs found') {\r\n      if (emptyComponent) mainElement.appendChild(emptyComponent)\r\n    } else if (errorComponent) {\r\n      mainElement.appendChild(errorComponent)\r\n    }\r\n    mainElement.style.display = mainDisplayStyle\r\n  }\r\n\r\n  function renderList() {\r\n    if (!listElement) return\r\n    handlePaginateButtonStatus()\r\n\r\n    let items: HTMLElement[] = []\r\n\r\n    // creating list of elements\r\n    paginatedData.forEach(item => {\r\n      let newElement = listElement!.cloneNode(true) as HTMLElement\r\n    \r\n      ALLOWED_FIELDS.forEach(field => {\r\n        // find all elements of the current field\r\n        newElement.querySelectorAll(`[tc-greenhouse-element=\"${field}\"]`).forEach(element => {\r\n          // replacing with actual data\r\n          if (field === 'location') {\r\n            element.innerHTML = item.location.name\r\n          } else if (field === 'department') {\r\n            console.log(item.departments)\r\n            element.innerHTML = item.departments[0]?.name\r\n          } else if (field === 'link') {\r\n            element.setAttribute('href', item.absolute_url || '#')\r\n          }else if (field === 'content') {\r\n            \r\n          } \r\n          else {\r\n            element.innerHTML = item[field as keyof job]\r\n          }\r\n        })\r\n      })\r\n      items.push(newElement)\r\n    })\r\n\r\n    // clearing current list of elements\r\n    list!.innerHTML = ''\r\n    list?.append(...items)\r\n  }\r\n\r\n  function setCurrentPageData() {\r\n    if (!filteredData) return\r\n    if (paginate) {\r\n      paginatedData = filteredData.slice((current_page - 1) * resultsPerPage, current_page * resultsPerPage)\r\n    } else {\r\n      if (!paginatedData.length) paginatedData = filteredData.slice((current_page - 1) * resultsPerPage, current_page * resultsPerPage)\r\n      // change on search\r\n      else {\r\n        paginatedData = filteredData.slice(0, resultsPerPage * current_page)\r\n      }\r\n    }\r\n    renderList()\r\n  }\r\n\r\n  function handleInputChange(value: string) {\r\n    if (!apiData) return\r\n    if (!value.trim()) {\r\n      filteredData = dataStore\r\n      dataStore = []\r\n    } else {\r\n      if (!dataStore.length) dataStore = filteredData\r\n\r\n      filteredData = dataStore.filter(item => {\r\n        return item.title.trim().toLowerCase().includes(value.trim().toLowerCase())\r\n        // ||\r\n        //   item.content.toLowerCase().includes(value.toLowerCase())\r\n      })\r\n    }\r\n    setCurrentPageData()\r\n  }\r\n\r\n  function addVerticalLoader() {\r\n    const loadMoreButton = mainElement?.querySelector('[tc-greenhouse-element=\"load-more\"]')\r\n    loadMoreButton?.addEventListener('click', handleLoadMore)\r\n  }\r\n\r\n  function handleLoadMore() {\r\n    if (current_page < Math.ceil(filteredData!.length / resultsPerPage)) {\r\n      current_page++\r\n      const newData = filteredData!.slice((current_page - 1) * resultsPerPage, current_page * resultsPerPage)\r\n      paginatedData = paginatedData.concat(newData)\r\n      renderList()\r\n    }\r\n  }\r\n\r\n  function addPagination() {\r\n    // add on click on next and previous buttons\r\n    const nextButton = document.getElementsByClassName('w-pagination-next')[0]\r\n    const previousButton = document.getElementsByClassName('w-pagination-previous')[0]\r\n\r\n    nextButton?.addEventListener('click', handleNext)\r\n    previousButton?.addEventListener('click', handlePrevious)\r\n  }\r\n\r\n  function handlePaginateButtonStatus() {\r\n    if (paginate) {\r\n      const nextButton = document.getElementsByClassName('w-pagination-next')[0] as HTMLElement\r\n      const previousButton = document.getElementsByClassName('w-pagination-previous')[0] as HTMLElement\r\n      if (!nextButton || !previousButton) return\r\n      if (current_page === 1) {\r\n        previousButton.style.display = 'none'\r\n        nextButton.style.display = 'inline-block'\r\n      } else if (current_page === Math.ceil(filteredData!.length / resultsPerPage)) {\r\n        nextButton.style.display = 'none'\r\n        previousButton.style.display = 'inline-block'\r\n      } else if (filteredData?.length <= resultsPerPage) {\r\n        nextButton.style.display = 'none'\r\n        previousButton.style.display = 'none'\r\n      } else {\r\n        nextButton.style.display = 'inline-block'\r\n        previousButton.style.display = 'inline-block'\r\n      }\r\n    } else {\r\n      const loadMoreButton = mainElement?.querySelector('[tc-greenhouse-element=\"load-more\"]') as HTMLElement\r\n      if (!loadMoreButton) return\r\n      if (current_page === Math.ceil(filteredData!.length / resultsPerPage) || filteredData?.length <= resultsPerPage) {\r\n        loadMoreButton.style.display = 'none'\r\n      } else {\r\n        loadMoreButton.style.display = 'inline-block'\r\n      }\r\n    }\r\n  }\r\n\r\n  function handlePrevious() {\r\n    if (current_page > 1) {\r\n      current_page--\r\n      paginatedData = filteredData!.slice((current_page - 1) * resultsPerPage, current_page * resultsPerPage)\r\n      renderList()\r\n    }\r\n    list?.scrollIntoView({ behavior: 'smooth' })\r\n  }\r\n\r\n  function handleNext() {\r\n    if (current_page < Math.ceil(filteredData!.length / resultsPerPage)) {\r\n      current_page++\r\n      paginatedData = filteredData!.slice((current_page - 1) * resultsPerPage, current_page * resultsPerPage)\r\n      renderList()\r\n    }\r\n    list?.scrollIntoView({ behavior: 'smooth' })\r\n  }\r\n\r\n  function setFilters() {\r\n    let filter_options = filters.map(filter => filter.name)\r\n\r\n    if (!apiData) return\r\n\r\n    // set filters\r\n    apiData.forEach(item => {\r\n      let existing_department = filters[0].options.map(option => option)\r\n      let existing_location = filters[1].options.map(option => option)\r\n\r\n      // department\r\n      let department = item.departments[0].name\r\n      let location = item.location.name\r\n\r\n      // department\r\n      if (!existing_department.includes(department)) filters[0].options.push(item.departments[0].name)\r\n      // location\r\n      if (!existing_location.includes(location)) filters[1].options.push(item.location.name)\r\n    })\r\n\r\n    let filterElements = mainElement?.querySelectorAll('[tc-greenhouse-filter]') as NodeListOf<HTMLSelectElement>\r\n\r\n    if (filterElements?.length) filterElements.forEach(item => {\r\n\r\n      let filter_type = item.getAttribute('tc-greenhouse-filter') as string\r\n\r\n      if (filter_options.includes(filter_type)) { // check if valid filter\r\n        let options = filters.find(filter => filter.name === filter_type)?.options\r\n        if (options?.length) {\r\n          options.forEach(option => {\r\n            let newOption = document.createElement('option')\r\n            newOption.value = option\r\n            newOption.textContent = option\r\n            item.appendChild(newOption)\r\n          })\r\n        }\r\n      }\r\n\r\n      item.onchange = (e) => { handleFilterChange(e) }\r\n    })\r\n\r\n\r\n  }\r\n\r\n  function handleFilterChange(e: Event) {\r\n    if (!apiData) return\r\n\r\n    const locationFilter = document.querySelector('[tc-greenhouse-filter=\"location\"]') as HTMLSelectElement\r\n    const departmentFilter = document.querySelector('[tc-greenhouse-filter=\"department\"]') as HTMLSelectElement\r\n\r\n    let sortedData: job[] = []\r\n\r\n    if (locationFilter?.value && departmentFilter?.value) {\r\n\r\n      if (locationFilter.value === 'All Locations' && departmentFilter.value === 'All Departments') sortedData = apiData\r\n      else if (locationFilter.value === 'All Locations') {\r\n        apiData.forEach(item => {\r\n          if (item.departments[0].name === departmentFilter.value) {\r\n            sortedData.push(item)\r\n          }\r\n        })\r\n      } else if (departmentFilter.value === 'All Departments') {\r\n        apiData.forEach(item => {\r\n          if (item.location.name === locationFilter.value) {\r\n            sortedData.push(item)\r\n          }\r\n        })\r\n      } else {\r\n        apiData.forEach(item => {\r\n          if (item.departments[0].name === departmentFilter.value && item.location.name === locationFilter.value) {\r\n            sortedData.push(item)\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    filteredData = sortedData\r\n    current_page = 1\r\n    setCurrentPageData()\r\n  }\r\n\r\n\r\n  async function getDataFromGreenhouseAPI() {\r\n\r\n    // fake await promise\r\n    // await new Promise(resolve => setTimeout(resolve, 2000)); // waits for 2 seconds\r\n\r\n    let data: job[] = []\r\n\r\n    try {\r\n      const board_id = mainElement.getAttribute('tc-greenhouse-board-id')\r\n      if (!board_id) throw new Error('Board id not found')\r\n\r\n      const fetch_content = mainElement.getAttribute('tc-greenhouse-content') === 'true' ? true : false\r\n\r\n      let res = await fetch(`https://boards-api.greenhouse.io/v1/boards/${board_id}/jobs?content=${true}`, {\r\n        method: 'GET',\r\n      }).then(res => res.json())\r\n\r\n      // throw new Error('No jobs found')\r\n\r\n      // throw new Error('Something went wrong')\r\n      if (!res.jobs) throw new Error('No jobs found')\r\n      data = res.jobs\r\n\r\n    } catch (err) {\r\n      return err\r\n    }\r\n\r\n    apiData = data\r\n    filteredData = data\r\n    setCurrentPageData()\r\n  }\r\n};\r\n", "import { greenhouse } from '@utils/greenhouse';\r\n\r\nwindow.Webflow ||= [];\r\n// window.Webflow.push(() => {\r\n//   greenhouse();\r\n// });\r\n\r\n// for testing purposes\r\nwindow.onload = () => {\r\n  greenhouse()\r\n}"],
  "mappings": "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",
  "names": ["location", "res"]
}
