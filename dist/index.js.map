{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/greenhouse.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\r\n", "export const greenhouse = async () => {\r\n  let current_page = 1;\r\n\r\n  let apiData: undefined | null | job[] = [] // all data from api response\r\n  let dataStore: job[] = [] // used for search\r\n  let filteredData: job[] = [] // all data with filters/search applied\r\n  let paginatedData: job[] = [] // paginated data\r\n\r\n  let filters: filter[] = [{\r\n    name: 'department',\r\n    options: ['All Departments']\r\n  }, {\r\n    name: 'location',\r\n    options: ['All Locations']\r\n  }]\r\n\r\n  const REQUIRED_FIELDS = ['department', 'title', 'location', 'content']\r\n\r\n  // components required\r\n  const mainElement = document.querySelector('[tc-greenhouse-element=\"main\"]') as HTMLDivElement;\r\n  const list = mainElement?.querySelector('[tc-greenhouse-element=\"list\"]') as HTMLDivElement;\r\n  const listElement = list?.querySelector('[tc-greenhouse-element=\"list-item\"]') as HTMLDivElement;\r\n\r\n  if (!mainElement || !list || !listElement) return // essentials/required\r\n\r\n  const errorComponent = mainElement?.querySelector('[tc-greenhouse-element=\"error\"]') as HTMLElement\r\n  errorComponent.remove()\r\n\r\n  const searchElement = mainElement?.querySelectorAll('[tc-greenhouse-element=\"search\"]')[0] as HTMLInputElement;\r\n  // @ts-ignore\r\n  searchElement && searchElement.addEventListener('input', e => handleInputChange(e.target.value))\r\n\r\n  // settings\r\n  let paginate: boolean = mainElement.getAttribute('tc-greenhouse-paginate') === 'true' ? true : false // default - false\r\n  paginate ? addPagination() : addVerticalLoader()\r\n\r\n  let contentSearch: boolean = mainElement.querySelector('[tc-greenhouse-content-search=\"true\"]') ? true : false // default - false\r\n  //  --- pending ----\r\n  let resultsPerPage = Number(mainElement.querySelector('[tc-greenhouse-results-per-page]')?.getAttribute('tc-greenhouse-results-per-page')) || 3 // default - 3\r\n  console.log((mainElement.querySelector('[tc-greenhouse-results-per-page]')?.getAttribute('tc-greenhouse-results-per-page')))\r\n\r\n  // --------------------- main api call ---------------------\r\n  const loader = mainElement?.querySelector('[tc-greenhouse-element=\"loader\"]') as HTMLElement\r\n  const mainParent = mainElement.parentElement as HTMLElement\r\n\r\n  const mainDisplayStyle = mainElement.style.display\r\n  mainElement.style.display = 'none'\r\n  mainParent.appendChild(loader)\r\n\r\n  let componentData = await getDataFromGreenhouseAPI()\r\n  mainParent.removeChild(loader)\r\n  if (componentData instanceof Error) return renderErrorComponent()\r\n  mainElement.style.display = mainDisplayStyle\r\n\r\n  setFilters()\r\n\r\n  function renderErrorComponent() {\r\n    mainElement.innerHTML = ''\r\n    if (errorComponent) mainElement!.appendChild(errorComponent)\r\n    mainElement.style.display = mainDisplayStyle\r\n  }\r\n\r\n  function renderList() {\r\n    if (!listElement) return\r\n\r\n    let items: HTMLElement[] = []\r\n\r\n    // creating list of elements\r\n    paginatedData.forEach(item => {\r\n      let newElement = listElement!.cloneNode(true) as HTMLElement\r\n\r\n      newElement.style.display = 'flex'\r\n      newElement.style.opacity = '1'\r\n      REQUIRED_FIELDS.forEach(field => {\r\n        // find all elements of the current field\r\n        newElement.querySelectorAll(`[tc-greenhouse-element=\"${field}\"]`).forEach(element => {\r\n          // replacing with actual data\r\n          if (field === 'location') {\r\n            element.innerHTML = item.location.name\r\n          } else {\r\n            element.textContent = item[field as keyof job]\r\n          }\r\n        })\r\n      })\r\n      items.push(newElement)\r\n    })\r\n\r\n    // clearing current list of elements\r\n    list!.innerHTML = ''\r\n    list?.append(...items)\r\n  }\r\n\r\n  function setCurrentPageData() {\r\n    if (!filteredData) return\r\n    console.log(\"current_page\", current_page)\r\n    if (paginate) {\r\n      paginatedData = filteredData.slice((current_page - 1) * resultsPerPage, current_page * resultsPerPage)\r\n      console.log(\"paginatedData\", paginatedData)\r\n    } else {\r\n      if (!paginatedData.length) paginatedData = filteredData.slice((current_page - 1) * resultsPerPage, current_page * resultsPerPage)\r\n      // change on search\r\n      else {\r\n        paginatedData = filteredData.slice(0, resultsPerPage * current_page)\r\n      }\r\n    }\r\n    renderList()\r\n  }\r\n\r\n  function handleInputChange(value: string) {\r\n    if (!apiData) return\r\n    console.log(value.trim())\r\n    if (!value.trim()) {\r\n      filteredData = dataStore\r\n      dataStore = []\r\n    } else {\r\n      if (!dataStore.length) dataStore = filteredData\r\n\r\n      filteredData = dataStore.filter(item => {\r\n        return item.title.trim().toLowerCase().includes(value.trim().toLowerCase())\r\n        // ||\r\n        //   item.content.toLowerCase().includes(value.toLowerCase())\r\n      })\r\n    }\r\n    setCurrentPageData()\r\n  }\r\n\r\n  function addVerticalLoader() {\r\n    const loadMoreButton = mainElement?.querySelector('[tc-greenhouse-element=\"load-more\"]')\r\n    console.log(loadMoreButton)\r\n    loadMoreButton?.addEventListener('click', handleLoadMore)\r\n  }\r\n\r\n  function handleLoadMore() {\r\n    if (current_page < Math.ceil(filteredData!.length / resultsPerPage)) {\r\n      current_page++\r\n      const newData = filteredData!.slice((current_page - 1) * resultsPerPage, current_page * resultsPerPage)\r\n      paginatedData = paginatedData.concat(newData)\r\n      renderList()\r\n    }\r\n  }\r\n\r\n  function addPagination() {\r\n    // add on click on next and previous buttons\r\n    const nextButton = document.getElementsByClassName('wf-next')[0]\r\n    const previousButton = document.getElementsByClassName('wf-previous')[0]\r\n\r\n    nextButton?.addEventListener('click', handleNext)\r\n    previousButton?.addEventListener('click', handlePrevious)\r\n  }\r\n\r\n  function handlePrevious() {\r\n    if (current_page > 1) {\r\n      current_page--\r\n      paginatedData = filteredData!.slice((current_page - 1) * resultsPerPage, current_page * resultsPerPage)\r\n      renderList()\r\n    }\r\n    list?.scrollIntoView({ behavior: 'smooth' })\r\n  }\r\n\r\n  function handleNext() {\r\n    if (current_page < Math.ceil(filteredData!.length / resultsPerPage)) {\r\n      current_page++\r\n      paginatedData = filteredData!.slice((current_page - 1) * resultsPerPage, current_page * resultsPerPage)\r\n      renderList()\r\n    }\r\n    list?.scrollIntoView({ behavior: 'smooth' })\r\n  }\r\n\r\n  function setFilters() {\r\n    let filter_options = filters.map(filter => filter.name)\r\n\r\n    if (!apiData) return\r\n\r\n    // set filters\r\n    apiData.forEach(item => {\r\n      let existing_department = filters[0].options.map(option => option)\r\n      let existing_location = filters[1].options.map(option => option)\r\n\r\n      // department\r\n      let department = item.departments[0].name\r\n      let location = item.location.name\r\n\r\n      // department\r\n      if (!existing_department.includes(department)) filters[0].options.push(item.departments[0].name)\r\n      // location\r\n      if (!existing_location.includes(location)) filters[1].options.push(item.location.name)\r\n    })\r\n\r\n    let filterElements = mainElement?.querySelectorAll('[tc-greenhouse-filter]') as NodeListOf<HTMLSelectElement>\r\n    console.log(filterElements, \"filterElements\")\r\n\r\n    if (filterElements?.length) filterElements.forEach(item => {\r\n\r\n      let filter_type = item.getAttribute('tc-greenhouse-filter') as string\r\n\r\n      if (filter_options.includes(filter_type)) { // check if valid filter\r\n        let options = filters.find(filter => filter.name === filter_type)?.options\r\n        if (options?.length) {\r\n          options.forEach(option => {\r\n            let newOption = document.createElement('option')\r\n            newOption.value = option\r\n            newOption.textContent = option\r\n            item.appendChild(newOption)\r\n          })\r\n        }\r\n      }\r\n\r\n      item.onchange = (e) => { handleFilterChange(e) }\r\n    })\r\n\r\n\r\n  }\r\n\r\n  function handleFilterChange(e: Event) {\r\n    if (!apiData) return\r\n    console.log(e.target)\r\n\r\n    const locationFilter = document.querySelector('[tc-greenhouse-filter=\"location\"]') as HTMLSelectElement\r\n    const departmentFilter = document.querySelector('[tc-greenhouse-filter=\"department\"]') as HTMLSelectElement\r\n\r\n    let sortedData: job[] = []\r\n\r\n    if (locationFilter?.value && departmentFilter?.value) {\r\n\r\n      if (locationFilter.value === 'All Locations' && departmentFilter.value === 'All Departments') sortedData = apiData\r\n      else if (locationFilter.value === 'All Locations') {\r\n        apiData.forEach(item => {\r\n          if (item.departments[0].name === departmentFilter.value) {\r\n            sortedData.push(item)\r\n          }\r\n        })\r\n      } else if (departmentFilter.value === 'All Departments') {\r\n        apiData.forEach(item => {\r\n          if (item.location.name === locationFilter.value) {\r\n            sortedData.push(item)\r\n          }\r\n        })\r\n      } else {\r\n        apiData.forEach(item => {\r\n          if (item.departments[0].name === departmentFilter.value && item.location.name === locationFilter.value) {\r\n            sortedData.push(item)\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    console.log(sortedData.length)\r\n    filteredData = sortedData\r\n    current_page = 1\r\n    setCurrentPageData()\r\n  }\r\n\r\n\r\n  async function getDataFromGreenhouseAPI() {\r\n\r\n\r\n    // mainElement?.replaceWith(loader)\r\n    // loader.style.display = 'flex'\r\n\r\n    // fake await promise\r\n    await new Promise(resolve => setTimeout(resolve, 2000)); // waits for 2 seconds\r\n\r\n    let data: job[] = []\r\n\r\n    try {\r\n      let res = await fetch(`https://boards-api.greenhouse.io/v1/boards/mural/jobs?content=true`, {\r\n        method: 'GET',\r\n      }).then(res => res.json())\r\n\r\n      // throw new Error('Something went wrong')\r\n\r\n      // throw new Error('Something went wrong')3\r\n      if (!res.jobs) throw new Error('No jobs found')\r\n      data = res.jobs\r\n\r\n    } catch (err) {\r\n      return err\r\n    }\r\n\r\n    apiData = data\r\n    filteredData = data\r\n    setCurrentPageData()\r\n  }\r\n};\r\n", "import { copyToClipboard } from '@utils/copyToClipboard';\r\nimport { greenhouse } from '@utils/greenhouse';\r\n\r\nwindow.Webflow ||= [];\r\n// window.Webflow.push(() => {\r\n//   greenhouse();\r\n//   // copyToClipboard();\r\n// });\r\n\r\n// for testing purposes\r\n\r\nwindow.onload = () => {\r\n  greenhouse()\r\n}"],
  "mappings": "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",
  "names": ["location", "res"]
}
