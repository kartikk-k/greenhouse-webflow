{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/greenhouse.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\r\n", "\r\nlet results_per_page = 3;\r\nlet current_page = 1;\r\n\r\nlet allData: job[] = []\r\nlet dataStore: undefined | null | job[]\r\n\r\nlet currentData: job[] = []\r\n\r\nlet filters: filter[] = [{\r\n  name: 'department',\r\n  options: ['All Departments']\r\n}, {\r\n  name: 'location',\r\n  options: ['All Locations']\r\n}]\r\n\r\n// let activeFilters: activeFilter[] = []\r\n// let { locationFilter, departmentFilter } = { locationFilter: 'All Locations', departmentFilter: 'All Departments' }\r\n\r\n// components required\r\nlet mainElement: Element | undefined\r\nlet list: Element | undefined\r\nlet listElement: Element | undefined\r\n\r\nlet REQUIRED_FIELDS = ['department', 'title', 'location', 'content']\r\n\r\nexport const greenhouse = async () => {\r\n\r\n  // Getting all the required elements\r\n  mainElement = document.querySelectorAll('[tc-greenhouse-element=\"main\"]')[0];\r\n  list = mainElement?.querySelectorAll('[tc-greenhouse-element=\"list\"]')[0];\r\n  listElement = list?.querySelectorAll('[tc-greenhouse-element=\"list-item\"]')[0];\r\n\r\n  if (!mainElement || !list || !listElement) return\r\n\r\n  // add on click on next and previous buttons\r\n  const nextButton = document.getElementsByClassName('wf-next')[0]\r\n  const previousButton = document.getElementsByClassName('wf-previous')[0]\r\n\r\n  nextButton.addEventListener('click', handleNext)\r\n  previousButton.addEventListener('click', handlePrevious)\r\n\r\n  await getDataFromGreenhouseAPI()\r\n  setFilters()\r\n};\r\n\r\nfunction renderList() {\r\n  if (!listElement) return\r\n\r\n  let items: HTMLElement[] = []\r\n\r\n  // creating list of elements\r\n  currentData.forEach(item => {\r\n    let newElement = listElement!.cloneNode(true) as HTMLElement\r\n\r\n    newElement.style.display = 'flex'\r\n    newElement.style.opacity = '1'\r\n    REQUIRED_FIELDS.forEach(field => {\r\n      // find all elements of the current field\r\n      newElement.querySelectorAll(`[tc-greenhouse-element=\"${field}\"]`).forEach(element => {\r\n        // replacing with actual data\r\n        if (field === 'location') {\r\n          element.innerHTML = item.location.name\r\n        } else {\r\n          element.textContent = item[field as keyof job]\r\n        }\r\n      })\r\n    })\r\n    items.push(newElement)\r\n  })\r\n\r\n  // clearing current list of elements\r\n  list!.innerHTML = ''\r\n  list?.append(...items)\r\n}\r\n\r\nfunction setCurrentPageData() {\r\n  if (!dataStore) return\r\n  console.log(\"current_page\", current_page)\r\n  currentData = dataStore.slice((current_page - 1) * results_per_page, current_page * results_per_page)\r\n  console.log(\"currentData\", currentData)\r\n  renderList()\r\n}\r\n\r\nfunction handlePrevious() {\r\n  if (current_page > 1) {\r\n    current_page--\r\n    currentData = dataStore!.slice((current_page - 1) * results_per_page, current_page * results_per_page)\r\n    renderList()\r\n  }\r\n  list?.scrollIntoView({ behavior: 'smooth' })\r\n}\r\n\r\nfunction handleNext() {\r\n  if (current_page < Math.ceil(dataStore!.length / results_per_page)) {\r\n    current_page++\r\n    currentData = dataStore!.slice((current_page - 1) * results_per_page, current_page * results_per_page)\r\n    renderList()\r\n  }\r\n  list?.scrollIntoView({ behavior: 'smooth' })\r\n}\r\n\r\nfunction setFilters() {\r\n  let filter_options = filters.map(filter => filter.name)\r\n\r\n  // set filters\r\n  allData.forEach(item => {\r\n    let existing_department = filters[0].options.map(option => option)\r\n    let existing_location = filters[1].options.map(option => option)\r\n\r\n    // department\r\n    let department = item.departments[0].name\r\n    let location = item.location.name\r\n\r\n    // department\r\n    if (!existing_department.includes(department)) filters[0].options.push(item.departments[0].name)\r\n    // location\r\n    if (!existing_location.includes(location)) filters[1].options.push(item.location.name)\r\n  })\r\n\r\n  let filterElements = mainElement?.querySelectorAll('[tc-greenhouse-filter]') as NodeListOf<HTMLSelectElement>\r\n  console.log(filterElements, \"filterElements\")\r\n\r\n  if (filterElements?.length) filterElements.forEach(item => {\r\n\r\n    let filter_type = item.getAttribute('tc-greenhouse-filter') as string\r\n\r\n    if (filter_options.includes(filter_type)) { // check if valid filter\r\n      let options = filters.find(filter => filter.name === filter_type)?.options\r\n      if (options?.length) {\r\n        options.forEach(option => {\r\n          let newOption = document.createElement('option')\r\n          newOption.value = option\r\n          newOption.textContent = option\r\n          item.appendChild(newOption)\r\n        })\r\n      }\r\n    }\r\n\r\n    item.onchange = (e) => { handleFilterChange(e) }\r\n  })\r\n\r\n\r\n}\r\n\r\nfunction handleFilterChange(e: Event) {\r\n\r\n  const locationFilter = document.querySelector('[tc-greenhouse-filter=\"location\"]') as HTMLSelectElement\r\n  const departmentFilter = document.querySelector('[tc-greenhouse-filter=\"department\"]') as HTMLSelectElement\r\n\r\n  let filteredData: job[] = []\r\n\r\n  if (locationFilter?.value && departmentFilter?.value) {\r\n\r\n    if (locationFilter.value === 'All Locations' && departmentFilter.value === 'All Departments') filteredData = allData\r\n    else if (locationFilter.value === 'All Locations') {\r\n      allData.forEach(item => {\r\n        if (item.departments[0].name === departmentFilter.value) {\r\n          filteredData.push(item)\r\n        }\r\n      })\r\n    } else if (departmentFilter.value === 'All Departments') {\r\n      allData.forEach(item => {\r\n        if (item.location.name === locationFilter.value) {\r\n          filteredData.push(item)\r\n        }\r\n      })\r\n    } else {\r\n      allData.forEach(item => {\r\n        if (item.departments[0].name === departmentFilter.value && item.location.name === locationFilter.value) {\r\n          filteredData.push(item)\r\n        }\r\n      })\r\n    }\r\n  }\r\n  console.log(filteredData.length)\r\n  dataStore = filteredData\r\n  current_page = 1\r\n  setCurrentPageData()\r\n  // if ((value === 'All Departments' || value === 'All Locations') && !activeFilters.length) {\r\n  //   dataStore = allData\r\n  //   activeFilters = []\r\n  //   setCurrentPageData()\r\n  //   return\r\n  // } else if (value === 'All Departments' || value === 'All Locations') {\r\n  //   activeFilters = activeFilters.filter(filter => filter.name !== (e.target as HTMLSelectElement).getAttribute('tc-greenhouse-filter'))\r\n  //   applyFilters()\r\n  //   return\r\n  // }\r\n\r\n  // let filter_type = (e.target as HTMLSelectElement).getAttribute('tc-greenhouse-filter') as string\r\n\r\n  // activeFilters.push({\r\n  //   name: filter_type,\r\n  //   options: value\r\n  // })\r\n\r\n  // applyFilters()\r\n}\r\n\r\n// function applyFilters() {\r\n//   let filteredData: job[] = []\r\n\r\n//   allData.forEach(item => {\r\n//     if (activeFilters.length > 1) {\r\n//       // multiple filters\r\n//       if (item.departments[0].name === activeFilters[0].options && item.location.name === activeFilters[1].options) {\r\n//         filteredData.push(item)\r\n//       }\r\n//     } else {\r\n//       // single filter\r\n//       if (activeFilters[0].name === 'department') {\r\n//         if (item.departments[0].name === activeFilters[0].options) {\r\n//           filteredData.push(item)\r\n//         }\r\n//       } else if (activeFilters[0].name === 'location') {\r\n//         if (item.location.name === activeFilters[0].options) {\r\n//           filteredData.push(item)\r\n//         }\r\n//       }\r\n//     }\r\n//   })\r\n\r\n//   // activeFilters.forEach(filter => {\r\n//   //   filteredData = allData.filter(item => {\r\n//   //     let isExists = false\r\n\r\n//   //     if (currentData.find(data => data.id === item.id)) isExists = true\r\n\r\n//   //     if (!isExists) {\r\n//   //       if (filter.name === 'department') {\r\n//   //         return item.departments[0].name === filter.options\r\n//   //       } else if (filter.name === 'location') {\r\n//   //         return item.location.name === filter.options\r\n//   //       }\r\n//   //     }\r\n\r\n//   //   })\r\n//   // })\r\n\r\n//   console.log(filteredData.length)\r\n\r\n//   dataStore = filteredData\r\n//   setCurrentPageData()\r\n// }\r\n\r\nasync function getDataFromGreenhouseAPI() {\r\n  let res = await fetch(`https://boards-api.greenhouse.io/v1/boards/mural/jobs?content=true`, {\r\n    method: 'GET',\r\n  }).then(res => res.json()).catch(err => console.log(err))\r\n\r\n  allData = res.jobs\r\n  dataStore = res.jobs\r\n  setCurrentPageData()\r\n}", "import { copyToClipboard } from '@utils/copyToClipboard';\r\nimport { greenhouse } from '@utils/greenhouse';\r\n\r\nwindow.Webflow ||= [];\r\n// window.Webflow.push(() => {\r\n//   greenhouse();\r\n//   // copyToClipboard();\r\n// });\r\n\r\n// for testing purposes\r\n\r\nwindow.onload = () => {\r\n  greenhouse()\r\n}"],
  "mappings": "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",
  "names": ["location", "res"]
}
