{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/greenhouse.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\r\n", "\r\nlet results_per_page = 5;\r\nlet current_page = 1;\r\n\r\nlet dataStore: undefined | null | job[]\r\n\r\nlet currentData: job[] = []\r\n\r\n// components required\r\nlet mainElement: Element | undefined\r\nlet list: Element | undefined\r\nlet listElement: Element | undefined\r\n\r\nlet REQUIRED_FIELDS = ['department', 'title', 'location', 'content']\r\n\r\nexport const greenhouse = async () => {\r\n\r\n  // Getting all the required elements\r\n  mainElement = document.querySelectorAll('[tc-greenhouse-element=\"main\"]')[0];\r\n  list = mainElement?.querySelectorAll('[tc-greenhouse-element=\"list\"]')[0];\r\n  listElement = list?.querySelectorAll('[tc-greenhouse-element=\"list-item\"]')[0];\r\n\r\n  if (!mainElement || !list || !listElement) return\r\n\r\n  // add on click on next and previous buttons\r\n  const nextButton = document.getElementsByClassName('wf-next')[0]\r\n  const previousButton = document.getElementsByClassName('wf-previous')[0]\r\n\r\n  nextButton.addEventListener('click', handleNext)\r\n  previousButton.addEventListener('click', handlePrevious)\r\n\r\n  await getDataFromGreenhouseAPI()\r\n};\r\n\r\nfunction renderList() {\r\n  if (!listElement) return\r\n\r\n  let items: HTMLElement[] = []\r\n\r\n  // creating list of elements\r\n  currentData.forEach(item => {\r\n    let newElement = listElement!.cloneNode(true) as HTMLElement\r\n\r\n    newElement.style.display = 'block'\r\n    newElement.style.opacity = '1'\r\n    REQUIRED_FIELDS.forEach(field => {\r\n      // find all elements of the current field\r\n      newElement.querySelectorAll(`[tc-greenhouse-element=\"${field}\"]`).forEach(element => {\r\n        // replacing with actual data\r\n        if (field === 'location') {\r\n          element.innerHTML = item.location.name\r\n        } else {\r\n          element.textContent = item[field as keyof job]\r\n        }\r\n      })\r\n    })\r\n    items.push(newElement)\r\n  })\r\n\r\n  // clearing current list of elements\r\n  list!.innerHTML = ''\r\n  list?.append(...items)\r\n}\r\n\r\nfunction setCurrentPageData(data: job[]) {\r\n  currentData = data.slice((current_page - 1) * results_per_page, current_page * results_per_page)\r\n  console.log(\"currentData\", currentData)\r\n  renderList()\r\n}\r\n\r\nfunction handlePrevious() {\r\n  console.log(\"clicked previous\")\r\n  if (current_page > 1) {\r\n    current_page--\r\n    currentData = dataStore!.slice((current_page - 1) * results_per_page, current_page * results_per_page)\r\n    renderList()\r\n  }\r\n  list?.scrollIntoView({ behavior: 'smooth' })\r\n}\r\n\r\nfunction handleNext() {\r\n  console.log(\"clicked next\")\r\n  if (current_page < Math.ceil(dataStore!.length / results_per_page)) {\r\n    current_page++\r\n    currentData = dataStore!.slice((current_page - 1) * results_per_page, current_page * results_per_page)\r\n    renderList()\r\n  }\r\n  list?.scrollIntoView({ behavior: 'smooth' })\r\n}\r\n\r\nasync function getDataFromGreenhouseAPI() {\r\n  let res = await fetch(`https://boards-api.greenhouse.io/v1/boards/mural/jobs?content=true`, {\r\n    method: 'GET',\r\n  }).then(res => res.json())\r\n\r\n  dataStore = res.jobs\r\n  setCurrentPageData(dataStore!)\r\n  console.log(res)\r\n}", "import { copyToClipboard } from '@utils/copyToClipboard';\r\nimport { greenhouse } from '@utils/greenhouse';\r\n\r\nwindow.Webflow ||= [];\r\n// window.Webflow.push(() => {\r\n//   greenhouse();\r\n//   // copyToClipboard();\r\n// });\r\n\r\n// for testing purposes\r\n\r\nwindow.onload = () => {\r\n  greenhouse()\r\n}"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACC7F,MAAI,mBAAmB;AACvB,MAAI,eAAe;AAEnB,MAAI;AAEJ,MAAI,cAAqB,CAAC;AAG1B,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,MAAI,kBAAkB,CAAC,cAAc,SAAS,YAAY,SAAS;AAE5D,MAAM,aAAa,YAAY;AAGpC,kBAAc,SAAS,iBAAiB,gCAAgC,EAAE,CAAC;AAC3E,WAAO,aAAa,iBAAiB,gCAAgC,EAAE,CAAC;AACxE,kBAAc,MAAM,iBAAiB,qCAAqC,EAAE,CAAC;AAE7E,QAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;AAAa;AAG3C,UAAM,aAAa,SAAS,uBAAuB,SAAS,EAAE,CAAC;AAC/D,UAAM,iBAAiB,SAAS,uBAAuB,aAAa,EAAE,CAAC;AAEvE,eAAW,iBAAiB,SAAS,UAAU;AAC/C,mBAAe,iBAAiB,SAAS,cAAc;AAEvD,UAAM,yBAAyB;AAAA,EACjC;AAEA,WAAS,aAAa;AACpB,QAAI,CAAC;AAAa;AAElB,QAAI,QAAuB,CAAC;AAG5B,gBAAY,QAAQ,UAAQ;AAC1B,UAAI,aAAa,YAAa,UAAU,IAAI;AAE5C,iBAAW,MAAM,UAAU;AAC3B,iBAAW,MAAM,UAAU;AAC3B,sBAAgB,QAAQ,WAAS;AAE/B,mBAAW,iBAAiB,2BAA2B,KAAK,IAAI,EAAE,QAAQ,aAAW;AAEnF,cAAI,UAAU,YAAY;AACxB,oBAAQ,YAAY,KAAK,SAAS;AAAA,UACpC,OAAO;AACL,oBAAQ,cAAc,KAAK,KAAkB;AAAA,UAC/C;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AACD,YAAM,KAAK,UAAU;AAAA,IACvB,CAAC;AAGD,SAAM,YAAY;AAClB,UAAM,OAAO,GAAG,KAAK;AAAA,EACvB;AAEA,WAAS,mBAAmB,MAAa;AACvC,kBAAc,KAAK,OAAO,eAAe,KAAK,kBAAkB,eAAe,gBAAgB;AAC/F,YAAQ,IAAI,eAAe,WAAW;AACtC,eAAW;AAAA,EACb;AAEA,WAAS,iBAAiB;AACxB,YAAQ,IAAI,kBAAkB;AAC9B,QAAI,eAAe,GAAG;AACpB;AACA,oBAAc,UAAW,OAAO,eAAe,KAAK,kBAAkB,eAAe,gBAAgB;AACrG,iBAAW;AAAA,IACb;AACA,UAAM,eAAe,EAAE,UAAU,SAAS,CAAC;AAAA,EAC7C;AAEA,WAAS,aAAa;AACpB,YAAQ,IAAI,cAAc;AAC1B,QAAI,eAAe,KAAK,KAAK,UAAW,SAAS,gBAAgB,GAAG;AAClE;AACA,oBAAc,UAAW,OAAO,eAAe,KAAK,kBAAkB,eAAe,gBAAgB;AACrG,iBAAW;AAAA,IACb;AACA,UAAM,eAAe,EAAE,UAAU,SAAS,CAAC;AAAA,EAC7C;AAEA,iBAAe,2BAA2B;AACxC,QAAI,MAAM,MAAM,MAAM,sEAAsE;AAAA,MAC1F,QAAQ;AAAA,IACV,CAAC,EAAE,KAAK,CAAAA,SAAOA,KAAI,KAAK,CAAC;AAEzB,gBAAY,IAAI;AAChB,uBAAmB,SAAU;AAC7B,YAAQ,IAAI,GAAG;AAAA,EACjB;;;AC/FA,SAAO,YAAY,CAAC;AAQpB,SAAO,SAAS,MAAM;AACpB,eAAW;AAAA,EACb;",
  "names": ["res"]
}
